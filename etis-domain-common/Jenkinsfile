node {

def date = new Date()
String time = date.format('HH:mm')
String dateString = date.format('MMdd')
def version = ""
def profile = ""

if(time.contains("11:0") || time.contains("18:0")){
  version = "0.0.1-SNAPSHOT-TEST"
  profile = "test"
}else if (time.contains("11:3") || time.contains("23:3")){
  version = "0.0.1-SNAPSHOT"
  profile = "dev"
}else {
  version = params.VERSION
  profile = params.PROFILE
}

try{
    notifyBuild('STARTED')
    stage('Checkout') {
        checkout([
            $class: 'GitSCM',
            branches: scm.branches,
            extensions: scm.extensions + [[$class: 'CleanCheckout']],
            userRemoteConfigs: scm.userRemoteConfigs,
        depth: 10
        ])
    }
	
    stage('Build UAT') {
           if (env.BRANCH_NAME == "etis-domain-common") {
             sh """#!/bin/bash -xe
			 cd etis-domain-common
             mvn versions:set -DnewVersion=${version}
             mvn clean install -X -P${profile}"""
			}
    }
    
    stage('Sonarqube') {
    if(params.TRIGGER_SONAR){
      def scannerHome = tool 'SonarQubeScanner'
      withSonarQubeEnv('sonarqube') {
        sh "${scannerHome}/bin/sonar-scanner"
        }
      }
	}

    stage('Build Next Project'){
      build job: 'etis-domain-sysad', wait: false, parameters: [[$class: 'StringParameterValue', name: 'VERSION', value: "${version}"], [$class: 'StringParameterValue', name: 'PROFILE', value: "${profile}"], [$class: 'BooleanParameterValue', name: 'TRIGGER_SONAR', value: "${params.TRIGGER_SONAR}"]]
			build job: 'etis-domain-trs', wait: false, parameters: [[$class: 'StringParameterValue', name: 'VERSION', value: "${version}"], [$class: 'StringParameterValue', name: 'PROFILE', value: "${profile}"], [$class: 'BooleanParameterValue', name: 'TRIGGER_SONAR', value: "${params.TRIGGER_SONAR}"]]			
			build job: 'etis-domain-crr', wait: false, parameters: [[$class: 'StringParameterValue', name: 'VERSION', value: "${version}"], [$class: 'StringParameterValue', name: 'PROFILE', value: "${profile}"], [$class: 'BooleanParameterValue', name: 'TRIGGER_SONAR', value: "${params.TRIGGER_SONAR}"]]
      build job: 'etis-domain-tcr', wait: false, parameters: [[$class: 'StringParameterValue', name: 'VERSION', value: "${version}"], [$class: 'StringParameterValue', name: 'PROFILE', value: "${profile}"], [$class: 'BooleanParameterValue', name: 'TRIGGER_SONAR', value: "${params.TRIGGER_SONAR}"]]
      build job: 'etis-domain-cms', wait: false, parameters: [[$class: 'StringParameterValue', name: 'VERSION', value: "${version}"], [$class: 'StringParameterValue', name: 'PROFILE', value: "${profile}"], [$class: 'BooleanParameterValue', name: 'TRIGGER_SONAR', value: "${params.TRIGGER_SONAR}"]]
  }
    
    
  
    
    properties([
    [$class: 'ParametersDefinitionProperty',
    parameterDefinitions: [
      [$class: 'StringParameterDefinition',
        name: 'VERSION',
        defaultValue: '0.0.1-SNAPSHOT',
        description: 'version'],
        [$class: 'StringParameterDefinition',
        name: 'PROFILE',
        defaultValue: 'dev',
        description: 'Profile'],
         [$class: 'BooleanParameterDefinition',
        name: 'TRIGGER_SONAR',
        defaultValue: false,
        description: 'SONAR Trigger']]
    ],
    [$class: 'BuildDiscarderProperty',
    strategy: [
        $class: 'LogRotator',
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '1',
        numToKeepStr: '3']
    ]
      ,pipelineTriggers([cron('0 11 * * *\n30 11 * * *\n0 18 * * *\n30 23 * * *')])
])
}catch (e) {
   // If there was an exception thrown, the build failed
   currentBuild.result = "FAILED"
   throw e
 } finally {
   // Success or failure, always send notifications
   notifyBuild(currentBuild.result)

    stage('Clear workspace'){
           cleanWs();
    }
 }
}

def notifyBuild(String buildStatus = 'STARTED') {
 // build status of null means successful
 buildStatus =  buildStatus ?: 'SUCCESSFUL'

 // Default values
 def colorName = 'RED'
 def colorCode = '#FF0000'
 def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
 def summary = "${subject} (${env.BUILD_URL})"

 // Override default values based on build status
 if (buildStatus == 'STARTED') {
   color = 'YELLOW'
   colorCode = '#FFFF00'
 } else if (buildStatus == 'SUCCESSFUL') {
   color = 'GREEN'
   colorCode = '#00FF00'
 } else {
   color = 'RED'
   colorCode = '#FF0000'
 }

 // Send notifications
 slackSend (color: colorCode, message: summary)
}